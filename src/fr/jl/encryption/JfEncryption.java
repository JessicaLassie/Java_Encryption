/*
 * Copyright (C) Jessica LASSIE from 2020 to present
 * All right reserved
 */
package fr.jl.encryption;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Date;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JFileChooser;

/**
 *
 * @author Jessica LASSIE
 */
public class JfEncryption extends javax.swing.JFrame {
    
    private static final String AES = "AES";
    private static final String RSA = "RSA";

    /**
     * Creates new form NewJFrame
     */
    public JfEncryption() {
        initComponents();
        
        buttonGroup.add(jRadioButtonDecrypt);
        buttonGroup.add(jRadioButtonEncrypt);
        jRadioButtonEncrypt.setSelected(true);
        jButtonStart.setEnabled(false);
        jComboBoxEncrypt.addItem(AES);
        jComboBoxEncrypt.addItem(RSA);
        jTextFieldKey.setEnabled(false);
        jDialogError.setSize(170, 140);
        jDialogSuccess.setSize(170, 140);
    }
    
    /**
     * Generate key in 128 bits for AES encryption
     * @return key
     * @throws NoSuchAlgorithmException 
     */
    private static SecretKey generateAESKey() throws NoSuchAlgorithmException {
        KeyGenerator keyGen = KeyGenerator.getInstance(AES);
        keyGen.init(128);
        SecretKey secretKey = keyGen.generateKey();
        return secretKey;
    }
    
    /**
     * Create format file
     * @param mode
     * @return file for encrypt or decrypt output
     */
    private File preFormating(final int mode) {
        SimpleDateFormat formater = new SimpleDateFormat("yyyyMMddHHmmss");
        final String date = formater.format(new Date());
        final int pos = jFileChooser.getSelectedFile().getAbsolutePath().indexOf('.');
        final String filePath = jFileChooser.getSelectedFile().getAbsolutePath();
        String modeType = "";
        switch (mode) {
            case 1:
                modeType = "_encrypted_";
                break;
            case 2:
                modeType = "_decrypted_";
                break;
            default :
                break;
        }
        return new File(filePath.substring(0, pos) + modeType + date + filePath.substring(pos, filePath.length()));
    }
    
    /**
     * Save key in a text file
     * @param key
     * @param keyFilePath
     * @return file with key
     */
    private File saveAESKey(final SecretKey key, final String keyFilePath) {
        SimpleDateFormat formater = new SimpleDateFormat("yyyyMMddHHmmss");
        final String date = formater.format(new Date());
        File keyFile = new File(keyFilePath + "\\key_" + date + ".txt");
        try (FileWriter fw = new FileWriter(keyFile.getAbsoluteFile()); BufferedWriter bw = new BufferedWriter(fw)){
            byte encoded[] = key.getEncoded();
            final String encodedKey = Base64.getEncoder().encodeToString(encoded);   
            keyFile.createNewFile();
            bw.write(encodedKey);
        } catch (IOException e) {
            jDialogError.setVisible(true);
            jLabelError.setText(e.getMessage());
        }
        return keyFile;
    }
    
    /**
     * Encryption/Decryption in AES
     * @param mode
     * @param key
     * @param inputFile
     * @param outputFile 
     */
    private void cryptingAES(final int mode, final SecretKey key, File inputFile, File outputFile) {
        try (FileInputStream inputStream = new FileInputStream(inputFile); FileOutputStream outputStream = new FileOutputStream(outputFile)) {
            Cipher cipher = Cipher.getInstance(AES);
            cipher.init(mode, key);
            byte[] inputBytes = new byte[(int)inputFile.length()];
            while (inputStream.read(inputBytes)>0) {
                byte[] outputBytes = cipher.doFinal(inputBytes);
                outputStream.write(outputBytes);
            }
            jDialogSuccess.setVisible(true);
        } catch (IOException | NoSuchPaddingException | NoSuchAlgorithmException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException ex) {
            jDialogError.setVisible(true);
            jLabelError.setText(ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        jFileChooser = new javax.swing.JFileChooser();
        jDialogError = new javax.swing.JDialog();
        jLabelError = new javax.swing.JLabel();
        jButtonDialogError = new javax.swing.JButton();
        jDialogSuccess = new javax.swing.JDialog();
        jLabelSuccess = new javax.swing.JLabel();
        jButtonDialogSuccess = new javax.swing.JButton();
        jLabelFile = new javax.swing.JLabel();
        jButtonSearchFile = new javax.swing.JButton();
        jButtonStart = new javax.swing.JButton();
        jRadioButtonEncrypt = new javax.swing.JRadioButton();
        jRadioButtonDecrypt = new javax.swing.JRadioButton();
        jComboBoxEncrypt = new javax.swing.JComboBox<>();
        jLabelEncrypt = new javax.swing.JLabel();
        jTextFieldKey = new javax.swing.JTextField();
        jLabelKey = new javax.swing.JLabel();
        jLabelSelectedFile = new javax.swing.JLabel();

        jDialogError.setTitle("Erreur");

        jButtonDialogError.setText("OK");
        jButtonDialogError.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDialogErrorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialogErrorLayout = new javax.swing.GroupLayout(jDialogError.getContentPane());
        jDialogError.getContentPane().setLayout(jDialogErrorLayout);
        jDialogErrorLayout.setHorizontalGroup(
            jDialogErrorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogErrorLayout.createSequentialGroup()
                .addGroup(jDialogErrorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialogErrorLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelError, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jDialogErrorLayout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jButtonDialogError)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDialogErrorLayout.setVerticalGroup(
            jDialogErrorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogErrorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jButtonDialogError)
                .addContainerGap())
        );

        jDialogSuccess.setTitle("Success");

        jLabelSuccess.setText("Success");

        jButtonDialogSuccess.setText("OK");
        jButtonDialogSuccess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDialogSuccessActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialogSuccessLayout = new javax.swing.GroupLayout(jDialogSuccess.getContentPane());
        jDialogSuccess.getContentPane().setLayout(jDialogSuccessLayout);
        jDialogSuccessLayout.setHorizontalGroup(
            jDialogSuccessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogSuccessLayout.createSequentialGroup()
                .addGroup(jDialogSuccessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialogSuccessLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelSuccess, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jDialogSuccessLayout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jButtonDialogSuccess)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDialogSuccessLayout.setVerticalGroup(
            jDialogSuccessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogSuccessLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelSuccess)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jButtonDialogSuccess)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Encryption");
        setMaximumSize(new java.awt.Dimension(431, 213));
        setResizable(false);
        setSize(new java.awt.Dimension(431, 213));

        jLabelFile.setText("File");

        jButtonSearchFile.setText("...");
        jButtonSearchFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchFileActionPerformed(evt);
            }
        });

        jButtonStart.setText("Start");
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });

        jRadioButtonEncrypt.setText("Encrypt");
        jRadioButtonEncrypt.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButtonEncryptStateChanged(evt);
            }
        });

        jRadioButtonDecrypt.setText("Decrypt");
        jRadioButtonDecrypt.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButtonDecryptStateChanged(evt);
            }
        });

        jLabelEncrypt.setText("Algorythm");

        jLabelKey.setText("Key");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldKey)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelEncrypt)
                            .addComponent(jComboBoxEncrypt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelFile)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRadioButtonEncrypt)
                                .addGap(54, 54, 54)
                                .addComponent(jRadioButtonDecrypt))
                            .addComponent(jButtonStart)
                            .addComponent(jLabelKey))
                        .addGap(0, 55, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonSearchFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelSelectedFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(43, 43, 43))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonEncrypt)
                    .addComponent(jRadioButtonDecrypt))
                .addGap(18, 18, 18)
                .addComponent(jLabelKey)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jLabelEncrypt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxEncrypt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabelFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSearchFile)
                    .addComponent(jLabelSelectedFile))
                .addGap(18, 18, 18)
                .addComponent(jButtonStart)
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSearchFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchFileActionPerformed
        final int value = jFileChooser.showOpenDialog(this);
        if(value == JFileChooser.APPROVE_OPTION){
            jFileChooser.getSelectedFile().getAbsolutePath();
            jLabelSelectedFile.setText(jFileChooser.getSelectedFile().getName());
            jButtonStart.setEnabled(true);
        }
    }//GEN-LAST:event_jButtonSearchFileActionPerformed

    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
        File inputFile = new File(jFileChooser.getSelectedFile().getAbsolutePath());
        switch (jComboBoxEncrypt.getSelectedItem().toString()) {
            case AES:
                if (jRadioButtonEncrypt.isSelected()) {
                    int mode = Cipher.ENCRYPT_MODE;
                    File outputFile = preFormating(mode);
                    try {
                        SecretKey key = generateAESKey();
                        File keyFile = saveAESKey(key, outputFile.getParent());
                        if (key != null && keyFile.exists()){
                            cryptingAES(mode, key, inputFile, outputFile);     
                        }                  
                    } catch (NoSuchAlgorithmException ex) {
                        jDialogError.setVisible(true);
                        jLabelError.setText(ex.getMessage());
                    }
                }
                if (jRadioButtonDecrypt.isSelected()) {
                    int mode = Cipher.DECRYPT_MODE;
                    File outputFile = preFormating(mode);
                    try {
                        byte[] decodedKey = Base64.getDecoder().decode(jTextFieldKey.getText());
                        SecretKey key = new SecretKeySpec(decodedKey, 0, decodedKey.length, AES); 
                        cryptingAES(mode, key, inputFile, outputFile);     
                    } catch (Exception e) {
                        jDialogError.setVisible(true);
                        jLabelError.setText(e.getMessage());
                    }
                }
                break;
            case RSA:
                //TO DO
                break;
            default :
                break;
        }
    }//GEN-LAST:event_jButtonStartActionPerformed

    private void jRadioButtonDecryptStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButtonDecryptStateChanged
        if (jRadioButtonDecrypt.isSelected()) {
            jTextFieldKey.setEnabled(true);
        }
    }//GEN-LAST:event_jRadioButtonDecryptStateChanged

    private void jRadioButtonEncryptStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButtonEncryptStateChanged
        if (jRadioButtonEncrypt.isSelected()) {
            jTextFieldKey.setEnabled(false);
        }
    }//GEN-LAST:event_jRadioButtonEncryptStateChanged

    private void jButtonDialogErrorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDialogErrorActionPerformed
        jDialogError.setVisible(false);
    }//GEN-LAST:event_jButtonDialogErrorActionPerformed

    private void jButtonDialogSuccessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDialogSuccessActionPerformed
        jDialogSuccess.setVisible(false);
    }//GEN-LAST:event_jButtonDialogSuccessActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JfEncryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new JfEncryption().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JButton jButtonDialogError;
    private javax.swing.JButton jButtonDialogSuccess;
    private javax.swing.JButton jButtonSearchFile;
    private javax.swing.JButton jButtonStart;
    private javax.swing.JComboBox<String> jComboBoxEncrypt;
    private javax.swing.JDialog jDialogError;
    private javax.swing.JDialog jDialogSuccess;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JLabel jLabelEncrypt;
    private javax.swing.JLabel jLabelError;
    private javax.swing.JLabel jLabelFile;
    private javax.swing.JLabel jLabelKey;
    private javax.swing.JLabel jLabelSelectedFile;
    private javax.swing.JLabel jLabelSuccess;
    private javax.swing.JRadioButton jRadioButtonDecrypt;
    private javax.swing.JRadioButton jRadioButtonEncrypt;
    private javax.swing.JTextField jTextFieldKey;
    // End of variables declaration//GEN-END:variables
}
