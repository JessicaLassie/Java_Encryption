/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.jl.encryption;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.swing.JFileChooser;

/**
 *
 * @author Jessica
 */
public class JfEncryption extends javax.swing.JFrame {
    
    private final String AES = "AES";
    private final String RSA = "RSA";

    /**
     * Creates new form NewJFrame
     */
    public JfEncryption() {
        initComponents();
        
        buttonGroup.add(jRadioButtonDecrypt);
        buttonGroup.add(jRadioButtonEncrypt);
        jRadioButtonEncrypt.setSelected(true);
        jButtonStart.setEnabled(false);
        jComboBoxEncrypt.addItem(AES);
        jComboBoxEncrypt.addItem(RSA);
    }
    
    /**
     * Generate key for AES encryption
     * @return key
     * @throws NoSuchAlgorithmException 
     */
    private SecretKey generateAESKey() throws NoSuchAlgorithmException {
        KeyGenerator keyGen = KeyGenerator.getInstance(AES);
        keyGen.init(128);
        SecretKey secretKey = keyGen.generateKey();
        return secretKey;
    }
    
    /**
     * Create format file
     * @param mode
     * @return file for encrypt or decrypt
     */
    private File preFormating(final int mode) {
        SimpleDateFormat formater = new SimpleDateFormat("yyyyMMddHHmmss");
        final String date = formater.format(new Date());
        final int pos = jFileChooser.getSelectedFile().getAbsolutePath().indexOf('.');
        final String filePath = jFileChooser.getSelectedFile().getAbsolutePath();
        String modeType = "";
        switch (mode) {
            case 1:
                modeType = "_encrypted_";
                break;
            case 2:
                modeType = "_decrypted_";
                break;
        }
        return new File(filePath.substring(0, pos) + modeType + date + filePath.substring(pos, filePath.length()));
    }
    
    /**
     * Save key in a text file
     * @param key
     * @param keyFilePath
     * @return file with key
     */
    private static File saveKey(final SecretKey key, final String keyFilePath) {
        SimpleDateFormat formater = new SimpleDateFormat("yyyyMMddHHmmss");
        final String date = formater.format(new Date());
        File keyFile = new File(keyFilePath + "\\key_" + date + ".txt");
        try {
            byte encoded[] = key.getEncoded();
            final String encodedKey = Base64.getEncoder().encodeToString(encoded);   
            keyFile.createNewFile();
            FileWriter fw = new FileWriter(keyFile.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(encodedKey);
            bw.close();
        } catch (IOException e) {
            
        }
        return keyFile;
    }
    
    /**
     * Encryption/Decryption
     * @param mode
     * @param key
     * @param inputFile
     * @param outputFile 
     */
    private void encryptAES(final int mode, final SecretKey key, File inputFile, File outputFile) {
        try (FileInputStream inputStream = new FileInputStream(inputFile); FileOutputStream outputStream = new FileOutputStream(outputFile)) {
            Cipher cipher = Cipher.getInstance(AES);
            cipher.init(mode, key);
            byte[] inputBytes = new byte[(int)inputFile.length()];
            while (inputStream.read(inputBytes)>0) {
                byte[] outputBytes = cipher.doFinal(inputBytes);
                outputStream.write(outputBytes);
            }
        } catch (FileNotFoundException ex) {
            System.out.println(ex);
        } catch (IOException | NoSuchPaddingException | NoSuchAlgorithmException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException ex) {
            System.out.println(ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        jFileChooser = new javax.swing.JFileChooser();
        jLabelFile = new javax.swing.JLabel();
        jButtonSearchFile = new javax.swing.JButton();
        jTextFieldFile = new javax.swing.JTextField();
        jButtonStart = new javax.swing.JButton();
        jRadioButtonEncrypt = new javax.swing.JRadioButton();
        jRadioButtonDecrypt = new javax.swing.JRadioButton();
        jComboBoxEncrypt = new javax.swing.JComboBox<>();
        jLabelEncrypt = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Encryption");
        setMaximumSize(new java.awt.Dimension(431, 213));
        setResizable(false);
        setSize(new java.awt.Dimension(431, 213));

        jLabelFile.setText("Choisir un fichier");

        jButtonSearchFile.setText("...");
        jButtonSearchFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchFileActionPerformed(evt);
            }
        });

        jButtonStart.setText("Lancer");
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });

        jRadioButtonEncrypt.setText("Crypter");

        jRadioButtonDecrypt.setText("DÃ©crypter");

        jLabelEncrypt.setText("Selectionnez un chiffrage");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelEncrypt)
                    .addComponent(jComboBoxEncrypt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelFile)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRadioButtonEncrypt)
                        .addGap(54, 54, 54)
                        .addComponent(jRadioButtonDecrypt))
                    .addComponent(jButtonStart)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonSearchFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldFile, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonEncrypt)
                    .addComponent(jRadioButtonDecrypt))
                .addGap(18, 18, 18)
                .addComponent(jLabelEncrypt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxEncrypt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabelFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSearchFile))
                .addGap(18, 18, 18)
                .addComponent(jButtonStart)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSearchFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchFileActionPerformed
        final int value = jFileChooser.showOpenDialog(this);
        if(value == JFileChooser.APPROVE_OPTION){
            jFileChooser.getSelectedFile().getAbsolutePath();
            jTextFieldFile.setText(jFileChooser.getSelectedFile().getName());
            jButtonStart.setEnabled(true);
        }
    }//GEN-LAST:event_jButtonSearchFileActionPerformed

    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
        File inputFile = new File(jFileChooser.getSelectedFile().getAbsolutePath());
        switch (jComboBoxEncrypt.getSelectedItem().toString()) {
            case AES:
                if (jRadioButtonEncrypt.isSelected()) {
                    int mode = Cipher.ENCRYPT_MODE;
                    File outputFile = preFormating(mode);
                    try {
                        SecretKey key = generateAESKey();
                        File keyFile = saveKey(key, outputFile.getParent());
                        if (key != null && keyFile.exists()){
                            encryptAES(mode, key, inputFile, outputFile);     
                        } else {
                            System.out.println("Erreur lors de la gÃ©nÃ©ration ou sauvegarde de la clÃ© !");
                        }
                    } catch (NoSuchAlgorithmException ex) {
                        System.out.println(ex);
                    }
                }
                if (jRadioButtonDecrypt.isSelected()) {
                    System.out.println("Decryptage non dÃ©veloppÃ©");
                }
                break;
            case RSA:
                System.out.println("RSA non dÃ©veloppÃ©"); 
                break;
        }
    }//GEN-LAST:event_jButtonStartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JfEncryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JfEncryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JfEncryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JfEncryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JfEncryption().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JButton jButtonSearchFile;
    private javax.swing.JButton jButtonStart;
    private javax.swing.JComboBox<String> jComboBoxEncrypt;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JLabel jLabelEncrypt;
    private javax.swing.JLabel jLabelFile;
    private javax.swing.JRadioButton jRadioButtonDecrypt;
    private javax.swing.JRadioButton jRadioButtonEncrypt;
    private javax.swing.JTextField jTextFieldFile;
    // End of variables declaration//GEN-END:variables
}
